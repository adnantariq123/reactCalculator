{"version":3,"sources":["serviceWorker.js","calculator.jsx","index.js"],"names":["Boolean","window","location","hostname","match","calculator","state","xxxxx","v1","v2","isCal","hasNumber","nullIt","_this","document","getElementById","innerHTML","okInsert","num","ss","setState","makeAdd","firstNum","console","log","makeSubtract","makeMultiply","makeDivide","deAnswer","answer","parseInt","thenReset","setTimeout","_this2","this","react_default","a","createElement","className","style","height","id","onClick","Component","ReactDOM","render","src_calculator","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6572d9f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\n\r\n\r\nclass calculator extends Component {\r\n    state = { \r\n        xxxxx:0,\r\n        v1:0,\r\n        v2:0,\r\n        isCal:null,\r\n        hasNumber:true\r\n\r\n    }\r\n\r\n    nullIt = () => {\r\n\r\n        if (this.state.hasNumber ===false ) {\r\n            document.getElementById('DaInserting').innerHTML = null;\r\n            //this.setState({hasNumber:1})           \r\n        }\r\n\r\n    }\r\n\r\n    okInsert = (num) => {\r\n        this.nullIt();        \r\n        let ss = document.getElementById('DaInserting').innerHTML += num;\r\n        this.setState({\r\n            hasNumber:true,\r\n            xxxxx:ss\r\n            \r\n        })\r\n;       \r\n    }\r\n\r\n\r\n    makeAdd = () => {\r\n        \r\n        const firstNum = this.state.xxxxx;\r\n\r\n\r\n        this.setState({\r\n            v1:firstNum,\r\n            xxxxx:0,\r\n            isCal:\"add\",\r\n            hasNumber:false\r\n        }, () => {\r\n            console.log(\"Add, firstNum is \" + firstNum );\r\n            console.log(\"and v1 is: \" + this.state.v1);\r\n            console.log(\"and isCal is: \" + this.state.isCal);\r\n            console.log(\"and hasNumber is: \" + this.state.hasNumber);\r\n        });\r\n\r\n    };\r\n\r\n    makeSubtract = () => {\r\n        //console.log(\"came to makeSubtract\");\r\n        \r\n        const firstNum = this.state.xxxxx;\r\n\r\n        this.setState({\r\n            v1:firstNum,\r\n            xxxxx:0,\r\n            isCal:\"subtract\",\r\n            hasNumber:false\r\n        }, () => {\r\n            console.log(\"Add, firstNum is \" + firstNum );\r\n            console.log(\"and v1 is: \" + this.state.v1);\r\n            console.log(\"and isCal is: \" + this.state.isCal);\r\n        });\r\n        \r\n    }\r\n\r\n    makeMultiply = () => {\r\n        //console.log(\"came to makeMultiply\");\r\n        const firstNum = this.state.xxxxx;\r\n\r\n        this.setState({\r\n            v1:firstNum,\r\n            xxxxx:0,\r\n            isCal:\"Multiply\",\r\n            hasNumber:false\r\n        }, () => {\r\n            console.log(\"Add, firstNum is \" + firstNum );\r\n            console.log(\"and v1 is: \" + this.state.v1);\r\n            console.log(\"and isCal is: \" + this.state.isCal);\r\n        });        \r\n    }    \r\n\r\n    makeDivide = () => {\r\n        const firstNum = this.state.xxxxx;\r\n\r\n        this.setState({\r\n            v1:firstNum,\r\n            xxxxx:0,\r\n            isCal:\"Divide\",\r\n            hasNumber:false\r\n        }, () => {\r\n            console.log(\"Add, firstNum is \" + firstNum );\r\n            console.log(\"and v1 is: \" + this.state.v1);\r\n            console.log(\"and isCal is: \" + this.state.isCal);\r\n        });\r\n    }\r\n\r\n\r\n\r\n    // OLDdeAnswer = () => {\r\n    //     //let deSecond = document.getElementById('DaInserting').innerHTML += num;\r\n    //     //this.setState({v2:deSecond})\r\n    //     let SecondNum = this.state.xxxxx;\r\n\r\n    //     this.setState({v2:SecondNum})\r\n\r\n    //     console.log(\"deSecond :\" + this.state.v2);\r\n    //     console.log(\"this.setState.isCal :\" + this.state.isCal);\r\n\r\n    //     let answer = 0;\r\n    //     this.setState.v2 = this.state.xxxxx;\r\n    //     if(this.state.isCal===\"add\") {\r\n    //         answer = this.state.v1 + this.state.v2;\r\n    //         console.log(\"and the answer is :\" + answer);\r\n    //     }\r\n\r\n    //     document.getElementById('DaInserting').innerHTML = answer;\r\n\r\n    //     //this.thenReset();\r\n    // }\r\n\r\n    deAnswer = () => {\r\n        let answer = 0;\r\n        if (this.state.isCal === \"add\") {\r\n            answer = parseInt(this.state.v1) + parseInt(this.state.xxxxx);   \r\n        }\r\n        else\r\n        if (this.state.isCal===\"subtract\") {\r\n            answer = parseInt(this.state.v1) - parseInt(this.state.xxxxx);\r\n        }\r\n        else\r\n        if (this.state.isCal===\"Multiply\") {\r\n            answer = parseInt(this.state.v1) * parseInt(this.state.xxxxx);\r\n        }\r\n        else\r\n        if (this.state.isCal===\"Divide\") {\r\n            answer = parseInt(this.state.v1) / parseInt(this.state.xxxxx);\r\n        }\r\n\r\n        this.setState({\r\n            v2: this.state.v1,\r\n            answer: answer,\r\n        })\r\n\r\n        this.thenReset();\r\n\r\n    } \r\n    \r\n\r\n    thenReset = () => {\r\n        if (this.setState.isCal !== null) {\r\n            this.setState({xxxxx:0})\r\n            this.setState({v1:0})\r\n            this.setState({v2:0})\r\n            this.setState({isCal:null})\r\n        }\r\n        setTimeout(\r\n            () => {\r\n                document.getElementById('DaInserting').innerHTML = null;\r\n            }, 1600);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        //console.log(\"\\nALL states\\nthis.state.xxxxx :\" + this.state.xxxxx + \"\\nthis.state.v1 :\"+ this.state.v1);\r\n        \r\n        return (\r\n            <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12\" style={{height:64}}>\r\n                <div className=\"btn w-100 h-75 m-2 shadow-sm rounded bg-light\" id=\"DaInserting\">{ this.state.answer }</div>\r\n                </div>\r\n            </div>    \r\n            <div className=\"row\">\r\n                <div className=\"col-3\"><div onClick={() => this.okInsert(7)} className=\"btn btn-secondary btn-lg m-2 btn-block \">7</div></div>\r\n                <div className=\"col-3\"><div onClick={() => this.okInsert(8)} className=\"btn btn-secondary btn-lg m-2 btn-block \">8</div></div>\r\n                <div className=\"col-3\"><div onClick={() => this.okInsert(9)} className=\"btn btn-secondary btn-lg m-2 btn-block \">9</div></div>\r\n                <div className=\"col-3\"><div onClick={this.makeDivide} className=\"btn btn-primary btn-lg m-2 btn-block \">/</div></div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-3\"><div onClick={() => this.okInsert(4)} className=\"btn btn-secondary btn-lg m-2 btn-block \">4</div></div>\r\n                <div className=\"col-3\"><div onClick={() => this.okInsert(5)} className=\"btn btn-secondary btn-lg m-2 btn-block \">5</div></div>\r\n                <div className=\"col-3\"><div onClick={() => this.okInsert(6)} className=\"btn btn-secondary btn-lg m-2 btn-block \">6</div></div>\r\n                <div className=\"col-3\"><div onClick={this.makeMultiply} className=\"btn btn-primary btn-lg m-2 btn-block \">x</div></div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-3\"><div onClick={() => this.okInsert(1)} className=\"btn btn-secondary btn-lg m-2 btn-block \">1</div></div>\r\n                <div className=\"col-3\"><div onClick={() => this.okInsert(2)} className=\"btn btn-secondary btn-lg m-2 btn-block \">2</div></div>\r\n                <div className=\"col-3\"><div onClick={() => this.okInsert(3)} className=\"btn btn-secondary btn-lg m-2 btn-block \">3</div></div>\r\n                <div className=\"col-3\"><div onClick={this.makeSubtract} className=\"btn btn-primary btn-lg m-2 btn-block \">-</div></div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-6\"><div onClick={this.deAnswer} className=\"btn btn-warning btn-lg m-2 btn-block \">=</div></div>\r\n                {/* <div className=\"col-3\"><div onClick={() => this.okInsert(\".\")} className=\"btn btn-secondary btn-lg m-2 btn-block \">.</div></div> */}\r\n                <div className=\"col-3\"><div onClick={() => this.okInsert(0)} className=\"btn btn-secondary btn-lg m-2 btn-block \">0</div></div>\r\n                <div className=\"col-3\"><div onClick={this.makeAdd} className=\"btn btn-primary btn-lg m-2 btn-block \">+</div></div>\r\n            </div>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n \r\nexport default calculator;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n//import DaCounters from './dacounters';\n\n// 'Apps' must start with uppercase or shit breaks!\nimport Calculator from './calculator';\n\nReactDOM.render(<Calculator />, document.getElementById('root'));\n\n//ReactDOM.render(<DaCounters />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}